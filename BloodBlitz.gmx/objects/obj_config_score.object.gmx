<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
surf = surface_create(room_width, room_height);

ini_open("data");

hs[0] = false;
hs[1] = hs[0];
hs[2] = hs[0];
hs[3] = hs[0];
hs[4] = hs[0];
hs[5] = hs[0];
hs[6] = hs[0];
hs[7] = hs[0];
hs[8] = hs[0];
hs[9] = hs[0];


if(score &gt; ini_read_real("hs", "score", 0)) {
    hs[0] = true;
    ini_write_real("hs", "score", score);
}

if(level &gt; ini_read_real("hs", "level", 0)) {
    hs[1] = true;
    ini_write_real("hs", "level", level);
}

if(count_banana &gt; ini_read_real("hs", "banana", 0)) {
    hs[2] = true;
    ini_write_real("hs", "banana", count_banana);
}

if(count_orange &gt; ini_read_real("hs", "orange", 0)) {
    hs[3] = true;
    ini_write_real("hs", "orange", count_orange);
}

if(count_grapes &gt; ini_read_real("hs", "grapes", 0)) {
    hs[4] = true;
    ini_write_real("hs", "grapes", count_grapes);
}

if(count_pizza &gt; ini_read_real("hs", "pizza", 0)) {
    hs[5] = true;
    ini_write_real("hs", "pizza", count_grapes);
}

if(bp_max[systolic] &gt; ini_read_real("hs", "bp_max_sys", ave_bp_sys)) {
    hs[6] = true;
    ini_write_real("hs", "bp_max_sys", bp_max[systolic]);
}

if(bp_min[systolic] &lt; ini_read_real("hs", "bp_min_sys", ave_bp_sys)) {
    hs[7] = true;
    ini_write_real("hs", "bp_min_sys", bp_min[systolic]);
}

if(bp_max[diastolic] &gt; ini_read_real("hs", "bp_max_dia", ave_bp_dia)) {
    hs[8] = true;
    ini_write_real("hs", "bp_max_dia", bp_max[diastolic]);
}

if(bp_min[diastolic] &lt; ini_read_real("hs", "bp_min_dia", ave_bp_dia)) {
    hs[9] = true;
    ini_write_real("hs", "bp_min_dia", bp_min[diastolic]);
}
//show_message(string(bp_min[diastolic])  + "#" + string(ini_read_real("hs", "bp_min_dia", 0)));

ini_write_real("lifetime", "score", ini_read_real("lifetime", "score", 0) + score);
ini_write_real("lifetime", "banana", ini_read_real("lifetime", "banana", 0) + count_banana);
ini_write_real("lifetime", "orange", ini_read_real("lifetime", "orange", 0) + count_orange );
ini_write_real("lifetime", "grapes", ini_read_real("lifetime", "grapes", 0) + count_grapes);
ini_write_real("lifetime", "pizza", ini_read_real("lifetime", "pizza", 0) + count_pizza);
ini_write_real("lifetime", "games", ini_read_real("lifetime", "games", 0) + 1);

ini_close();

/*
show_message(string(score) + ", " + string(level) + "," + string(bp_max[systolic]) + "/" + string(bp_max[diastolic]) + "#"
                + string(bp_min[systolic]) + "/" + string(bp_min[diastolic]) + ", ");
                
                */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(surface_exists(surf)) draw_surface(surf, 0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(surf)) {
    surface_set_target(surf);
    draw_clear_alpha(background_colour, 1);
    
    surface_reset_target();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(!surface_exists(surf)) {
    surf = surface_create(room_width, room_height);
}


surface_set_target(surf);

draw_set_colour(c_white);

draw_set_font(fnt_title);
draw_text(100, 100, "Score Summary");

if(hs[0]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 140, "Score: " + string(score));

if(hs[1]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 180, "Level: " + string(level));

if(hs[2]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 220, "Banana: " + string(count_banana));

if(hs[3]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 260, "Orange: " + string(count_orange));

if(hs[4]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 300, "Grapes: " + string(count_grapes));

if(hs[5]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 340, "Pizza: " + string(count_pizza));

if(hs[6]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 380, "BP Systolic Max: " + string(bp_max[systolic]));

if(hs[7]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 420, "BP Systolic Min: " + string(bp_min[systolic]));

if(hs[8]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 460, "BP Diastolic Max: " + string(bp_max[diastolic]));

if(hs[9]) draw_set_colour(c_yellow);
else draw_set_color(c_white);
draw_text(200, 500, "BP Diastolic Min: " + string(bp_min[diastolic]));

draw_sprite(spr_game_over, 0, room_width * 0.75, room_height/2);


surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
