<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
PLAN:

Level 1 Objective: make health to 100%
    Boss: multiplying boss
Level 2 Objective: have health above 80% for the next 60 seconds
    Boss: nutrient eating for 30 second
Level 3 Objective: never touch a germs
    Boss: reduce blood pressure to minimum
Level 4 Objective: 
    Boss: 


*/




ini_open("config");

/********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*************************************************************************                                               *********************************************************************
*************************************************************************               WINDOW SETTINGS                 *********************************************************************
*************************************************************************                                               *********************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************/

globalvar   game_width,
            game_height,
            menu_width,
            menu_height,
            game_x,
            game_y,
            menu_x,
            menu_y;

game_width = 720;
game_height = 720;
menu_width = 1280 - game_width;
menu_height = 720;

if(ini_read_real("display", "Layout", dir_left) == dir_left) {
    game_x = menu_width;
    game_y = 0;
    menu_x = 0;
    menu_y = 0;
} else {
    game_x = 0;
    game_y = 0;
    menu_x = game_width;
    menu_y = 0;
}


/********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*************************************************************************                                               *********************************************************************
*************************************************************************              CONTROLS SETTINGS                *********************************************************************
*************************************************************************                                               *********************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************/

//hiding the cursor
window_set_cursor(cr_none);
window_mouse_set(window_get_width()/2, window_get_height()/2);



/********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*************************************************************************                                               *********************************************************************
*************************************************************************                GAME SETTINGS                  *********************************************************************
*************************************************************************                                               *********************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************/

globalvar blood_pressure, blood_condition, pulse_rate, blood_diff;
blood_pressure[systolic] = ave_bp_sys;
blood_pressure[diastolic] = ave_bp_dia;
blood_condition = systolic;
pulse_rate = ave_pulse_rate;
blood_diff[systolic] = blood_pressure[systolic];
blood_diff[diastolic] = blood_pressure[diastolic];


//for hs:
globalvar bp_max, pulse_max, pulse_min, bp_min, count_banana, count_orange, count_grapes, count_pizza;
bp_max[systolic] = ave_bp_sys;
bp_max[diastolic] = ave_bp_dia;
bp_min[systolic] = ave_bp_sys;
bp_min[diastolic] = ave_bp_dia;
pulse_max = ave_pulse_rate;
pulse_min = ave_pulse_rate;
count_banana = 0;
count_orange = 0;
count_grapes = 0;
count_pizza = 0;


//new settings

globalvar pause, level;
pause = false;
level = 1;
score = 0;
health = 65;


globalvar mouse_sensitivity;
mouse_sensitivity = ini_read_real("Controls", "MouseSensitivity", 0.8);

globalvar game_over;
game_over = false;

//surface drawers
globalvar ui_menu, ui_game;
ui_menu = surface_create(menu_width, menu_height);
ui_game = surface_create(game_width, game_height);

instance_create(game_x, game_y, obj_bg);

for(var pos_y = game_y; pos_y &lt;= game_y + game_height + sprite_get_height(spr_wall); pos_y += sprite_get_height(spr_wall)) {
    instance_create(game_x, pos_y, obj_wall);
    wallObj = instance_create(game_x + game_width, pos_y, obj_wall_mir);
}

globalvar player;
player = instance_create(game_x + game_width/2, game_y + 0.35 * game_height, obj_player);

globalvar mouse_dir;
mouse_dir = scr_get_mouse_dir();

//alarms
alarm[10] = 1;  //pulse rate
alarm[11] = 60; //objects
alarm[9] = pulse_rate;  //health reduction
alarm[8] = random_range(60, 120); //common bacteria

base_score = 1500;
for_exit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var num = 80 - 2 * (level - 1);
if(num &lt; 15) num = 15;
if(random(100)  &lt;= num) {
instance_create(random_range(game_x + sprite_get_width(spr_wall)*scr_wall_get_scale_left() + sprite_get_height(spr_banana),
                    game_x + game_width - sprite_get_width(spr_wall)*scr_wall_get_scale_right() - sprite_get_height(spr_banana)),
                    random_range(game_y + game_height + sprite_get_height(spr_banana)/2, game_y + game_height + 3*sprite_get_height(spr_banana)),
                    obj_banana);
}

var num = 36 - 2 * (level - 1);
if(num &lt; 3) num = 15;
if(random(100) &lt;= num) {
    instance_create(random_range(game_x + sprite_get_width(spr_wall)*scr_wall_get_scale_left() + sprite_get_height(spr_pizza),
                    game_x + game_width - sprite_get_width(spr_wall)*scr_wall_get_scale_right() - sprite_get_height(spr_pizza)),
                    random_range(game_y + game_height + sprite_get_height(spr_pizza)/2, game_y + game_height + 3*sprite_get_height(spr_pizza)),
                    obj_pizza);
}

var num =  49 - 4 *(level - 2);
if(num &lt; 10) num = 20;
if(random(100) &lt;= num &amp;&amp; level &gt; 1) {
    instance_create(random_range(game_x + sprite_get_width(spr_wall)*scr_wall_get_scale_left() + sprite_get_height(spr_orange),
                    game_x + game_width - sprite_get_width(spr_wall)*scr_wall_get_scale_right() - sprite_get_height(spr_orange)),
                    random_range(game_y + game_height + sprite_get_height(spr_orange)/2, game_y + game_height + 3*sprite_get_height(spr_orange)),
                    obj_orange);
}

var num =  36 - 3 *(level - 3);
if(num &lt; 5) num = 10;
if(random(100) &lt;= num &amp;&amp; level &gt; 2) {
    instance_create(random_range(game_x + sprite_get_width(spr_wall)*scr_wall_get_scale_left() + sprite_get_height(spr_grapes),
                    game_x + game_width - sprite_get_width(spr_wall)*scr_wall_get_scale_right() - sprite_get_height(spr_grapes)),
                    random_range(game_y + game_height + sprite_get_height(spr_grapes)/2, game_y + game_height + 3*sprite_get_height(spr_grapes)),
                    obj_grapes);

}

var num = 60 - 3 * level;
if(num &lt; 30) num = 30;
alarm[11] = num;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*************************************************************************                                               *********************************************************************
*************************************************************************               HEART BEAT                      *********************************************************************
*************************************************************************                                               *********************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************/

if(blood_condition == systolic) {
    if(blood_pressure[diastolic] &gt; bp_max[diastolic]) bp_max[diastolic] = blood_pressure[diastolic];
    if(blood_pressure[diastolic] &lt; bp_min[diastolic]) bp_min[diastolic] = blood_pressure[diastolic];
   
    blood_condition = diastolic;
}
else {
    if(blood_pressure[systolic] &gt; bp_max[systolic]) bp_max[systolic] = blood_pressure[systolic];
    if(blood_pressure[systolic] &lt; bp_min[systolic]) bp_min[systolic] = blood_pressure[systolic];
    
    blood_condition = systolic;
}



if(pulse_rate &gt; max_pulse_rate) {
    alarm[10] = min_pulse_time;
} else if(pulse_rate &gt; ave_pulse_rate) {
    alarm[10] = min_pulse_time 
                    + (ave_pulse_time - min_pulse_time)
                    * ((max_pulse_rate - ave_pulse_rate) - (pulse_rate - ave_pulse_rate))
                    / (max_pulse_rate - min_pulse_rate);
} else if(pulse_rate == ave_pulse_rate) {
    alarm[10] = ave_pulse_time;
} else if(pulse_rate &lt; ave_pulse_rate) {
    alarm[10] = ave_pulse_time
                    + (max_pulse_time - ave_pulse_time)
                    * (ave_pulse_rate - pulse_rate)
                    /(ave_pulse_rate - min_pulse_rate);
} else {
    alarm[10] = max_pulse_time;
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
health -= 1.5 + power(1.1, level);

if(pulse_rate &gt; max_pulse_rate) {
    alarm[9] = 120;
} else if(pulse_rate &gt; ave_pulse_rate) {
    alarm[9] = 80 + 40 * (max_pulse_rate - pulse_rate)/(max_pulse_rate - ave_pulse_rate);
} else if(pulse_rate == ave_pulse_rate) {
    alarm[9] = 80;
} else if(pulse_rate &gt; min_pulse_rate) {
    alarm[9] = 30 + 50 * (pulse_rate - min_pulse_rate)/min_pulse_rate;
} else {
    alarm[9] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var num = 83 + level/3;
if(num &gt; 93) num = 93;
if(random(100) &lt; num){
instance_create(
random_range(
    game_x + sprite_get_width(spr_wall) * scr_wall_get_scale_left() + sprite_get_width(spr_bacteria_2),
    game_x + game_width - sprite_get_width(spr_wall) * scr_wall_get_scale_right() - sprite_get_width(spr_bacteria_2)
), game_y + game_height + 2 * sprite_get_height(spr_bacteria_2), obj_bacteria_1);
}

num = 36 + (level - 2) * 1.25;
if(num &gt; 69) num = 69;
if(random(100) &lt; num &amp;&amp; level &gt;= 2) {
instance_create(
random_range(
    game_x + sprite_get_width(spr_wall) * scr_wall_get_scale_left() + sprite_get_width(spr_bacteria_1),
    game_x + game_width - sprite_get_width(spr_wall) * scr_wall_get_scale_right() - sprite_get_width(spr_bacteria_1)
), game_y + game_height + 2 * sprite_get_height(spr_bacteria_1), obj_bacteria_2);
}

num = 40 + (level - 3) * 1.1;
if(num &gt; 64) num = 64;
if(random(100) &lt; num &amp;&amp; level &gt;= 3) {
instance_create(
random_range(
    game_x + sprite_get_width(spr_wall) * scr_wall_get_scale_left() + sprite_get_width(spr_bacteria_3),
    game_x + game_width - sprite_get_width(spr_wall) * scr_wall_get_scale_right() - sprite_get_width(spr_bacteria_3)
), game_y + game_height + 2 * sprite_get_height(spr_bacteria_3), obj_bacteria_3);
}


if(level == 1) alarm[8] = random_range(60, 100);
if(level == 2) alarm[8] = random_range(50, 100);
if(level == 3) alarm[8] = random_range(50, 80);
if(level &gt;= 4) alarm[8] = random_range(50, 65);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_config</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
*************************************************************************                                               *********************************************************************
*************************************************************************                 WALL CREATION                 *********************************************************************
*************************************************************************                                               *********************************************************************
*********************************************************************************************************************************************************************************************
*********************************************************************************************************************************************************************************************
********************************************************************************************************************************************************************************************/
/*
if(wallObj[1].y &lt;= scr_game_get_y(game_height) + 2*sprite_get_height(spr_wall)){
    wallObj[0] = instance_create(scr_game_get_x(0), 
                    wallObj[1].y,
                    obj_wall);
    wallObj[0].image_xscale = scr_wall_get_scale_left();
    wallObj[1] = instance_create(scr_game_get_x(game_width),  
                    wallObj[1].y + sprite_get_height(spr_wall),
                    obj_wall);
    wallObj[1].image_angle = 180;
    wallObj[1].image_xscale = scr_wall_get_scale_right();
}
/*
if(bgObj[0].y &lt;= scr_game_get_y(0)) {
    bgObj[1] = instance_create(scr_game_get_x(0),
                scr_game_get_y(0) + sprite_get_height(spr_game_bg),
                obj_bg);
    bgObj[1].lastObj = bgObj[0];
    bgObj[0] = bgObj[1];
}
*/

if(wallObj.y &lt;= game_y + game_height + sprite_get_height(spr_wall)) {// - sprite_get_height(spr_wall)) {
    for(var pos_y = wallObj.y + sprite_get_height(spr_wall); pos_y &lt;= game_y + game_height + sprite_get_height(spr_wall); pos_y += sprite_get_height(spr_wall)) {
        instance_create(game_x, pos_y , obj_wall);    
        wallObj = instance_create(game_x + game_width, pos_y, obj_wall_mir);   
    }
   // wallObj = instance_create(game_x, game_y + game_height, obj_wall);    
   // wallObj = instance_create(game_x + game_width, wallObj.y, obj_wall_mir);
}



//for debugging purposes
if(debugging) {
    if(keyboard_check(vk_left)) {
        blood_diff[systolic] -= 1;
        if(keyboard_check(vk_shift)) {
            blood_diff[systolic] -= 4;
        }
    }
    if(keyboard_check(vk_right)) {
        blood_diff[systolic] += 1;
        if(keyboard_check(vk_shift)) {
            blood_diff[systolic] += 4;
        }
    }
    if(keyboard_check(vk_up)) {
        blood_diff[diastolic] += 1;
        if(keyboard_check(vk_shift)) {
            blood_diff[diastolic] += 4;
        }
    }
    if(keyboard_check(vk_down)) {
        blood_diff[diastolic] -= 1;
        if(keyboard_check(vk_shift)) {
            blood_diff[diastolic] -= 4;
        }
    }
    if(keyboard_check(vk_pageup)) {
        pulse_rate += 1;
    }
    if(keyboard_check(vk_pagedown)) {
        pulse_rate -= 1;
    }
    if(keyboard_check(vk_home)) {
        mouse_sensitivity += 0.005;
    }
    if(keyboard_check(vk_end)) {
        mouse_sensitivity -= 0.005;
    }
    if(keyboard_check_pressed(ord('9'))) {
        level -= 1;
    }
    if(keyboard_check_pressed(ord('0'))) {
        level += 1;
    }
    if(keyboard_check_released(ord('1'))) {
        room_goto(rm_menu);
    }
}

mouse_dir = scr_get_mouse_dir();

if(health &lt;= 0) {
    game_over = true;
    room_persistent = false;
    room_goto(rm_score);
}

if(blood_pressure[systolic] &gt; blood_diff[systolic]) {
    blood_pressure[systolic] -= 1;
} else if(blood_pressure[systolic] &lt; blood_diff[systolic]) {
    blood_pressure[systolic] += 1;
}

if(blood_pressure[diastolic] &gt; blood_diff[diastolic]) {
    blood_pressure[diastolic] -= 1;
} else if(blood_pressure[diastolic] &lt; blood_diff[diastolic]) {
    blood_pressure[diastolic] += 1;
}

//if(blood_diff[diastolic] &gt;= 0.8*

if(score &gt;= base_score) {
    level += 1;
    base_score = base_score + 400 * power(1.5, level);
    pulse_rate = random_range(min_pulse_rate, max_pulse_rate);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_persistent = true;
room_goto(rm_pause);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


if(surface_exists(ui_menu)) {
    surface_free(ui_menu);
}
if(surface_exists(ui_game)) {
    surface_free(ui_game);
}
/*
if(game_over) {
    ini_open("data");
    ini_write_real("last", "bp_sys_max", bp_max[systolic]);
    ini_write_real("last", "bp_dia_max", bp_max[diastolic]);
    ini_write_real("last", "bp_sys_min", bp_min[systolic]);
    ini_write_real("last", "bp_dia_min", bp_min[diastolic]);
    ini_write_real("last", "pulse_rate_max", pulse_max);
    ini_write_real("last", "pulse_rate_min", pulse_min);
    ini_write_real("last", "score", score);
    ini_write_real("last", "banana", count_banana);
    ini_write_real("last", "orange", count_orange);
    ini_write_real("last", "grapes", count_grapes);
    ini_write_real("last", "level" , level);
    ini_close();
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_persistent = !global.resetgame;
if(global.gotomenu) {
    room_goto(rm_menu);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(ui_game)) {
    draw_surface(ui_game, game_x, game_y);
}

if(surface_exists(ui_menu)) {
    draw_surface(ui_menu, menu_x, menu_y);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(ui_menu)) {
    surface_set_target(ui_menu);
    draw_clear_alpha(c_dkgray, 1);
//    draw_clear_alpha(background_colour, 1);
    surface_reset_target();
}
if(surface_exists(ui_game)) {
    surface_set_target(ui_game);
    draw_clear_alpha(c_black, 1);
//    draw_clear_alpha(background_colour, 1);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_config</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(ui_menu)) {
    ui_menu = surface_create(menu_width, menu_height);
}
surface_set_target(ui_menu);
draw_set_font(fnt_fps);
draw_set_colour(c_white);
/*
draw_text(  scr_menu_get_x(scr_menu_percent_width(0.8)), 
            scr_menu_get_y(scr_menu_percent_height(0.9)),
            string(fps) + " FPS"
        );


//for debugging infos
if(debugging) {
    draw_text(scr_menu_get_x(0), scr_menu_get_y(0), 
        "Blood Pressure: " + string(blood_pressure[systolic]) + "/" + string(blood_pressure[diastolic]) 
        + ", scale=" + string(scr_wall_get_scale_left()) + "/" + string(scr_wall_get_scale_right()) 
        + ",# speed=" + string(scr_wall_get_speed()) + "#" +
        "Pulse Rate: " + string(pulse_rate) + "#" + 
        "Wall Objects: " + string(instance_number(obj_wall)) + "#" +
        "Room Speed: " + string(room_speed) + "#" + 
        "Background Objects: " + string(instance_number(obj_bg)) + "#"
    );    
}
*/
var sw = surface_get_width(ui_menu);
var sh = surface_get_height(ui_menu);
draw_text(  sw * 0.75, 
            sh*0.9,
            string(fps) + " FPS"
        );


//for debugging infos
if(debugging) {
    draw_set_font(fnt_debug);
    draw_text(0, 0, 
        "Blood Pressure: " + string(blood_pressure[systolic]) + "/" + string(blood_pressure[diastolic]) 
        + ", scale=" + string(scr_wall_get_scale_left()) + "/" + string(scr_wall_get_scale_right()) 
        + ", speed=" + string(scr_wall_get_speed()) +
        + ", bd=" + string(blood_diff[systolic]) + "/" + string(blood_diff[diastolic]) + "#" + 
        "Pulse Rate: " + string(pulse_rate) + "#" + 
        "Wall Objects: " + string(instance_number(obj_wall)) + "#" +
        "Room Speed: " + string(room_speed) + "#" +
        "Player: " + string(player.x) + ", " + string(player.y) + " surf=" + string(player.x - game_x) + ", " + string(player.y - game_y) + " scale=" + string(player.image_xscale) + "/" + string(player.image_yscale) + "#" +
        "Mouse: D=" + string(mouse_dir[DIR]) + " F=" + string(mouse_dir[FORCE]) + "S=" + string(mouse_sensitivity) + "#" +
        "Player Col: " + string(player.wallCollision[COLLISION]) + "/" + string(player.wallCollision[DIR]) + "/" + string(player.wallCollision[FORCE]) + "#" +
        "Player Spr: rot=" + string(player.image_angle) + " ind=" + string(player.image_index) + "#" + 
        "Game Var: level=" + string(level) + "#" + 
        "Collectibles: " + string(instance_number(obj_collectibles)) + "#" +
        "Point System: score=" + string(score) + " health=" + string(health) + "#" +
        "MAX BP: " + string(bp_max[systolic]) + "/" + string(bp_max[diastolic]) + "#" +
        "MIN BP: " + string(bp_min[systolic]) + "/" + string(bp_min[diastolic]) + "#" +
        ""
            
    );    
}
else {
    draw_set_font(fnt_title);
    draw_text(menu_x + menu_width/2 - 110, menu_height/4 - 50, "Score: ");
    draw_text(menu_x + menu_width/2, menu_height/4 - 50, string(score));
    
    
    draw_sprite(spr_bp, 0, menu_x + menu_width/2 - sprite_get_width(spr_bp), menu_height/4 + 80);
    draw_text(menu_x + menu_width/2, menu_height/4 + 50, string(blood_pressure[systolic]) + "/" +string(blood_pressure[diastolic]));
//    draw_text(menu_x + menu_width/2, menu_height/4 + 150, string(health));
    
    
    draw_text(menu_x + menu_width/2 - 100, menu_height/4 + 300, "Level " + string(level));
    if(health &gt;= 100) draw_set_color(c_blue);
    else if(health &gt;= 50) draw_set_color(c_green);
    else if(health &gt;= 25) draw_set_color(c_yellow);
    else draw_set_color(c_red);
    draw_rectangle(menu_x + menu_width/2, menu_height/4 + 200, (health/100) * (0.25 * menu_width) + menu_x + menu_width/2, menu_height/4 + 170, 0);
    draw_sprite(spr_health, 0, menu_x + menu_width/2 - sprite_get_width(spr_health), menu_height/4 + 200);
}

surface_reset_target();



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
