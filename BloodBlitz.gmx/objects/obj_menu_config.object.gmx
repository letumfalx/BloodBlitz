<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

surf = surface_create(room_width, room_height);

menu_spr[START_GAME] = spr_blood_menu;
menu_spr[STAT] = spr_orange;
menu_spr[HOW_TO] = spr_banana;
menu_spr[EXIT] = spr_grapes;

menu_img_index[START_GAME] = random_range(0, 5);
menu_img_index[STAT] = random_range(0, 3);
menu_img_index[HOW_TO] = random_range(0, 3);
menu_img_index[EXIT] = random_range(0, 3);

alarm[11] = 90;

last_item = global.last_room;


switch(last_item) {
    case rm_stat:
        last_item = STAT;
        break;
    case rm_howto:
    case rm_how_to:
        last_item = HOW_TO;
        break;
    default:
        last_item = START_GAME;
}
next_item = 0;
get_mouse = false;
scale_reduc = 0.5/60;
dist_reduc = 200/60;
total_scale = 0;
total_dist = 0;
cur_dir = dir_center;
can_next_page = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu_img_index[START_GAME] = random_range(0, 5);
menu_img_index[STAT] = random_range(0, 3);
menu_img_index[HOW_TO] = random_range(0, 3);
menu_img_index[EXIT] = random_range(0, 3);

alarm[11] = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
get_mouse = false;
last_item = next_item;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(keyboard_key_release(ord('1'))) {
    room_goto(rm_game);
}

var md = scr_get_mouse_dir();
if(!get_mouse &amp;&amp; md[FORCE] != 0) {
    if(md[DIR] == dir_left) {
        next_item = last_item - 1;
        if(next_item &lt; 0) next_item = 0;
    } else {
        next_item = last_item + 1;
        if(next_item &gt; EXIT) next_item = EXIT;
    }
    if(next_item != last_item) {
        get_mouse = true;
        total_scale = 0;
        total_dist = 0;
        cur_dir = md[DIR];
        alarm[10] = 60;        
    }   
}


if(mouse_check_button_released(mb_left) &amp;&amp; can_next_page) {
    can_next_page = false;
    switch(last_item) {
        case START_GAME:
            room_goto(rm_game);
            exit;
        case STAT:
            //show_message("room_stat");
            room_goto(rm_stat);
            exit;
        case HOW_TO:
            //show_message("room_howto");
            room_goto(rm_howto);
            exit;
        case EXIT:
            game_end();
            exit;
    }
}

if(mouse_check_button_pressed(mb_left)) {
    can_next_page = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(last_item != next_item) {
    last_item = next_item;
}


switch(last_item) {
    case START_GAME:
        room_goto(rm_game);
        break;
    case STAT:
        room_goto(rm_stat);
        break;
    case HOW_TO:
        //room_goto(rm_howto);
        room_goto(rm_how_to);
        break;
    case EXIT:
        game_end();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
surface_free(surf);
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.resetgame = true;
global.gotomenu = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(surface_exists(surf)) {
    draw_surface(surf, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(surf)) {
    
    surface_set_target(surf);
    
    draw_clear_alpha(background_colour, 1);
    
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(surf)) {
    surf = surface_create(room_width, room_height);
}

surface_set_target(surf);

draw_sprite(spr_title, 0, room_width/2, room_height * 0.15);

if(!get_mouse) {
    for(var i=0; i&lt;=EXIT; i++) {
        var scale = 1.0;
        if(last_item == i) scale = 1.5;
        draw_sprite_ext(menu_spr[i], menu_img_index[i], 
        (room_width/2) + ((i - last_item) * 200), room_height/2, scale, scale, 0, c_white, 1.0);
    }
    var xscale = 0.5;
    var yscale = 0.5;
    var clr = c_white;
    if(last_item == START_GAME) draw_sprite_ext(spr_menu_start, 0, room_width/2, room_height * 0.8, xscale, yscale, 0, clr, 1);
    if(last_item == STAT) draw_sprite_ext(spr_menu_stat, 0, room_width/2, room_height * 0.8, xscale, yscale, 0, clr, 1);
    if(last_item == HOW_TO) draw_sprite_ext(spr_menu_howto, 0, room_width/2, room_height * 0.8, xscale, yscale, 0, clr, 1);
    if(last_item == EXIT) draw_sprite_ext(spr_menu_exit, 0, room_width/2, room_height * 0.8, xscale, yscale, 0, clr, 1);
    
    
} else {
    for(var i=0; i&lt;=EXIT; i++) {
        var scale = 1.0;
        if(last_item == i) scale = 1.5 - total_scale;
        if(next_item == i) scale = 1.0 + total_scale;
        draw_sprite_ext(menu_spr[i], menu_img_index[i], 
        (room_width/2) + ((i - last_item) * 200) - total_dist, room_height/2, scale, scale, 0, c_white, 1.0);
    }
    total_scale += scale_reduc;
    if(cur_dir == dir_left) {
        total_dist -= dist_reduc;    
    } else {
        total_dist += dist_reduc;
    }
    
}

surface_reset_target();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
